head	1.14;
access;
symbols;
locks
	lewis:1.14; strict;
comment	@ * @;


1.14
date	2008.06.19.15.23.44;	author lewis;	state Exp;
branches;
next	1.13;

1.13
date	2008.06.19.13.03.59;	author lewis;	state Exp;
branches;
next	1.12;

1.12
date	2008.06.19.12.27.47;	author lewis;	state Exp;
branches;
next	1.11;

1.11
date	2008.06.19.11.45.11;	author lewis;	state Exp;
branches;
next	1.10;

1.10
date	2008.06.19.11.12.33;	author lewis;	state Exp;
branches;
next	1.9;

1.9
date	2008.06.19.08.43.55;	author lewis;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.18.12.41.31;	author lewis;	state Exp;
branches;
next	1.7;

1.7
date	2008.06.17.16.55.49;	author lewis;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.17.13.03.15;	author lewis;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.17.08.25.35;	author lewis;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.16.11.47.48;	author lewis;	state Exp;
branches;
next	1.3;

1.3
date	2008.06.11.13.14.48;	author lewis;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.10.08.42.13;	author lewis;	state Exp;
branches;
next	1.1;

1.1
date	2008.06.09.12.53.32;	author lewis;	state Exp;
branches;
next	;


desc
@@


1.14
log
@*** empty log message ***
@
text
@/* ======================================================================= */
/* Include file to provide the PRIVATE LRFSC device driver tables.         */
/* These tables are used internally by the driver for managing the client, */
/* model, module, and driver contexts.                                     */
/* ======================================================================= */

/* Dont define the module more than once */

#ifndef LRFSCDRVR_P
#define LRFSCDRVR_P

#include <lrfscdrvr.h>

#define LrfscDrvrSTART_OF_RAM	0x80000
#define LrfscDrvrTOTAL_RAM_SIZE	0x80000
#define LrfscDrvrRAM_IQ_ENTRIES	(LrfscDrvrTOTAL_RAM_SIZE/sizeof(LrfscDrvrIQPair))
#define LrfscDrvrTICK_TO_PAIR	2
#define LrfscDrvrSKP_FACTOR     (LrfscDrvrTICK_TO_PAIR * LrfscDrvrBUF_IQ_ENTRIES)

/* ===================================================== */
/* Ram Select enumeration                                */
/* ===================================================== */

typedef enum {
   LrfscDrvrRamSETPOINTS,   /* SetPoints   */
   LrfscDrvrRamFEEDFORWARD, /* FeedForward */
   LrfscDrvrRamDIAG1,	
   LrfscDrvrRamDIAG2,
   LrfscDrvrRamDIAG3,
   LrfscDrvrRamDIAG4
 } LrfscDrvrRamSelection;

#define LrfscDrvrRamSELECTS 6

/* ===================================================== */
/* Diagnostic signal selection                           */
/* ===================================================== */

typedef unsigned short LrfscDrvrDiagRegisters[LrfscDrvrDiagSIGNAL_CHOICES];

/* ===================================================== */
/* Coefficients                                          */
/* ===================================================== */

typedef LrfscDrvrMatrixCoefficients LrfscDrvrMatrixCoefficientRegisters[LrfscDrvrMatrixMATRICES];

/* ===================================================== */
/* PIC registers                                         */
/* They must be posative sign never set                  */
/* ===================================================== */

typedef struct {
   signed short KP;    /* Proportional gain of PI controller*/
   signed short KI;    /* Integral gain of PI controller    */
 } LrfscDrvrPicRegisters;

/* ===================================================== */
/* Configuration ram layout                              */
/* ===================================================== */

typedef struct {
   short              High;
   short              Low;
 } LrfscDrvr2Shorts;

typedef union {
   int                Long;
   LrfscDrvr2Shorts   Shorts;
 } LrfscDrvrIncrement;

typedef struct __attribute__ ((__packed__)) {
   unsigned short     Next;     /* Next vector short address */
   unsigned short     Ticks;
   LrfscDrvrIncrement IncI;
   LrfscDrvrIncrement IncQ;
 } LrfscDrvrVector;

typedef LrfscDrvrVector LrfscDrvrVectorArray[LrfscDrvrBUF_IQ_ENTRIES];

/* ===================================================== */
/* Diagnostic Ram Layout                                 */
/* ===================================================== */

typedef LrfscDrvrIQPair LrfcsDrvrRamIqArray[LrfscDrvrRAM_IQ_ENTRIES];

/* ===================================================== */
/* Module address has base address in it                 */
/* ===================================================== */

typedef struct {
   unsigned short *VMEAddress;     /* Base address for A24,D16    */
   unsigned short *RamAddress;     /* Address for the Ram 1       */
   unsigned short InterruptVector; /* Interrupt vector number     */
   unsigned short InterruptLevel;  /* Interrupt level (2 usually) */
 } LrfscDrvrModuleAddress;

/* ================================================================== */
/* The "info" table passed to the install procedure at startup time.  */
/* Containes the VME address of each modLrfscDrvrMatrixule.           */
/* Comes back from the installer                                      */
/* ================================================================== */

typedef struct {
   unsigned long          Modules;
   LrfscDrvrModuleAddress Addresses[LrfscDrvrMODULE_CONTEXTS];
 } LrfscDrvrInfoTable;

/* ===================================================== */
/* Structures needed to handle interrupt connections     */
/* ===================================================== */

/* Up to 32 incomming events per client are queued */

#define LrfscDrvrCLIENT_QUEUE_SIZE 32

typedef struct {
   unsigned long       QOff;
   unsigned long       Size;
   unsigned long       Head;
   unsigned long       Tail;
   unsigned long       Missed;
   LrfscDrvrConnection Queue[LrfscDrvrCLIENT_QUEUE_SIZE];
 } LrfscDrvrClientQueue;
 
/* ====================================================================== */
/* A client context contains all particular data concerning a particular  */
/* client. The default values are set up by the OPEN routine, which are   */
/* later modifyable via IOCTL calls.                                      */
/* ====================================================================== */

typedef struct {
   unsigned long          InUse;
   unsigned long          Pid;
   unsigned long          ClientIndex;
   unsigned long          ModuleIndex;
   unsigned long          Timeout;
   int                    Timer;
   int                    Semaphore;
   LrfscDrvrClientQueue   Queue;
   unsigned long          Debug;
   LrfscDrvrPulse         Pulse;
 } LrfscDrvrClientContext;

/* ===================================================== */
/* Module context.                                       */
/* ===================================================== */

typedef struct {
   unsigned long                ModuleIndex;
   unsigned long                SkipCount;
   unsigned long                SkipStart;
   LrfscDrvrPulse               Pulse;
   LrfscDrvrInterrupt           Clients[LrfscDrvrCLIENT_CONTEXTS];
   LrfscDrvrState               State;
   LrfscDrvrModuleAddress       Address;
   LrfscDrvrControl             Control;
   LrfscDrvrRamSelection        RamSelect;
   LrfscDrvrResCtrl             ResCtrl;
   LrfscDrvrAnalogSwitch        SwitchCtrl;
   LrfscDrvrSoftSwitch          SoftSwitch;
   LrfscDrvrPicRegisters        Pic;
   unsigned long                DiagTime;
   unsigned long                RfOnMaxLen;
   LrfscDrvrConfigArray         Configs[LrfscDrvrCONFIGS][LrfscDrvrCYCLES];
   LrfscDrvrVectorArray         Vectors[LrfscDrvrCONFIGS][LrfscDrvrCYCLES];
   LrfscDrvrMatrixCoefficients  Coefficients[LrfscDrvrMatrixMATRICES];
   LrfscDrvrDiagChoices         SignalChoices;
   LrfscDrvrBufIqArray          Diags[LrfscDrvrDiagSIGNALS][LrfscDrvrCYCLES];
   unsigned long                ValidDiags[LrfscDrvrDiagSIGNALS][LrfscDrvrCYCLES];
} LrfscDrvrModuleContext;

/* ===================================================== */
/* Driver working area                                   */
/* ===================================================== */

typedef struct {
   unsigned long          Modules;
   LrfscDrvrModuleContext ModuleContexts[LrfscDrvrMODULE_CONTEXTS];
   LrfscDrvrClientContext ClientContexts[LrfscDrvrCLIENT_CONTEXTS];
 } LrfscDrvrWorkingArea;

/* ===================================================== */
/* Declare the LRFSC memory map using the above structure */
/* ===================================================== */

typedef struct {

   unsigned short	IrqSource;	/* RO X LrfscDrvrInterrupt (Clear on Read)	*/
   unsigned short	State;		/* RW X LrfscDrvrState						*/
   unsigned short	Control;	/* RW P LrfscDrvrControl					*/
   unsigned short	Vector;		/* RW Interrupt vector						*/
   unsigned short	RamSelect;	/* RW P LrfscDrvrRamSelection 				*/

   LrfscDrvrDiagRegisters SignalChoices;	/* RW X LrfscDrvrDiagSignalChoice	*/

   LrfscDrvrResCtrl	ResCtrl;	/* RW+RO X Resonance cavity control */
   
   unsigned short	SwitchCtrl;	/* RW X LrfscDrvrAnalogSwitch	*/
   unsigned short	SoftSwitch;	/* RW X LrfscDrvrSoftSwitch		*/

   LrfscDrvrMatrixCoefficientRegisters	Matrix;		/* RW P Ordered by LrfscDrvrMatrix */
   LrfscDrvrDiagSnapShot                SnapShot;       /* RW P */
   LrfscDrvrPicRegisters                Pic;            /* RW P Must be posative */

   unsigned short       RfOffTime;      /* RW Acquired number of 40MHz ticks during RFON pulse  */

   unsigned short       PulseNumber;    /* RO Pulse number in the cycle                         */
   unsigned short       NextCycle;      /* RW Next 0..31 cycle. Active on next start cycle      */
   unsigned short       PresCycle;      /* RO Present cycle executing                           */
   unsigned short       VhdlVerH;       /* RO High word of VHDL version 32 Bit UTC time         */
   unsigned short       VhdlVerL;       /* RO Low  word of VHDL version 32 Bit UTC time         */
   unsigned short       Status;         /* RO LrfscDrvrStatus Module status                     */
   unsigned short       RfOnMaxLen;     /* RW Maximum RF pulse length in ticks                  */
 } LrfscDrvrMemoryMap;

#endif
@


1.13
log
@*** empty log message ***
@
text
@d72 1
d78 1
a78 1
typedef LrfscDrvrVector LrfscDrvrVectorArray[LrfscDrvrBUF_IQ_ENTRIES] __attribute__ ((__packed__));
@


1.12
log
@*** empty log message ***
@
text
@d77 1
a77 1
typedef LrfscDrvrVector LrfscDrvrVectorArray[LrfscDrvrBUF_IQ_ENTRIES];
@


1.11
log
@*** empty log message ***
@
text
@d71 1
a71 1
typedef struct {
@


1.10
log
@*** empty log message ***
@
text
@d77 1
a77 1
typedef LrfscDrvrVector LrfscDrvrVectorArray[LrfscDrvrRAM_IQ_ENTRIES];
@


1.9
log
@*** empty log message ***
@
text
@d1 1
a1 1
/***************************************************************************/
d5 1
a5 1
/***************************************************************************/
d14 9
a22 2
/* ------------------------------------ */
/* Ram Select enumeration               */
d35 3
a37 2
/* ------------------------------------ */
/* Diagnostic signal selection          */
d41 3
a43 2
/* ------------------------------------ */
/* Coefficients                         */
d47 4
a50 3
/* ------------------------------------ */
/* PIC registers                        */
/* They must be posative sign never set */ 
d57 31
a87 3
/*************************************************************************/
/* Module address has base address in it                                 */
/*************************************************************************/
d96 5
a100 5
/**************************************************************************/
/* The "info" table passed to the install procedure at startup time.      */
/* Containes the VME address of each modLrfscDrvrMatrixule.                              */
/* Comes back from the installer                                          */
/**************************************************************************/
d107 3
a109 2
/* ************************************************* */
/* Structures needed to handle interrupt connections */
a110 1
/* ----------------------------------------------- */
d124 1
a124 1
/**************************************************************************/
d128 1
a128 1
/**************************************************************************/
d143 3
a145 3
/**************************************************************************/
/* Module context.                                                        */
/**************************************************************************/
d164 1
d171 3
a173 3
/**************************************************************************/
/* Driver working area                                                    */
/**************************************************************************/
a180 22
/**************************************************************************/
/* Ram Layout, sizes are in bytes                                         */
/**************************************************************************/

#define LrfscDrvrSTART_OF_RAM	0x80000
#define LrfscDrvrTOTAL_RAM_SIZE	0x80000
#define LrfscDrvrRAM_IQ_ENTRIES	(LrfscDrvrTOTAL_RAM_SIZE/sizeof(LrfscDrvrIQPair))
#define LrfscDrvrTICK_TO_PAIR	2
#define LrfscDrvrSKP_FACTOR     (LrfscDrvrTICK_TO_PAIR * LrfscDrvrBUF_IQ_ENTRIES)
 
typedef LrfscDrvrIQPair LrfcsDrvrRamIqArray[LrfscDrvrRAM_IQ_ENTRIES];

typedef struct {
   unsigned short Ticks;
   union {
      int IntIQVal;
      short ShortIQVal[2];
   }
 } LrfscDrvrIncrementIQ;

typedef LrfscDrvrIncIQ LrfscDrvrIncIQArray[LrfscDrvrRAM_IQ_ENTRIES];

@


1.8
log
@*** empty log message ***
@
text
@d154 10
@


1.7
log
@*** empty log message ***
@
text
@a125 1
   unsigned long                ValidConfigs[LrfscDrvrCONFIGS][LrfscDrvrCYCLES];
@


1.6
log
@*** empty log message ***
@
text
@d125 1
a125 1
   LrfscDrvrBufIqArray          Configs[LrfscDrvrCONFIGS][LrfscDrvrCYCLES];
@


1.5
log
@*** empty log message ***
@
text
@d102 1
a102 1
   LrfscDrvrPulse         Pulses;
@


1.4
log
@*** empty log message ***
@
text
@d65 2
a66 2
   unsigned long			Modules;
   LrfscDrvrModuleAddress	Addresses[LrfscDrvrMODULE_CONTEXTS];
d78 5
a82 5
   unsigned long   QOff;
   unsigned long   Size;
   unsigned long   Head;
   unsigned long   Tail;
   unsigned long   Missed;
d113 1
a113 1
   LrfscDrvrPulse               Pulses;
d129 2
a130 2
   LrfscDrvrBufIqArray          Diags[LrfscDrvrDiagSIGNALS][LrfscDrvrCYCLES][LrfscDrvrPULSES];
   unsigned long                ValidDiags[LrfscDrvrDiagSIGNALS][LrfscDrvrCYCLES][LrfscDrvrPULSES];
d151 1
a151 1
#define LrfscDrvrSKP_FACTOR		(LrfscDrvrTICK_TO_PAIR * LrfscDrvrBUF_IQ_ENTRIES)
@


1.3
log
@*** empty log message ***
@
text
@d113 12
a124 12
   LrfscDrvrPulse				Pulses;
   LrfscDrvrInterrupt			Clients[LrfscDrvrCLIENT_CONTEXTS];
   LrfscDrvrState				State;
   LrfscDrvrModuleAddress		Address;
   LrfscDrvrControl				Control;
   LrfscDrvrRamSelection		RamSelect;
   LrfscDrvrResCtrl				ResCtrl;
   LrfscDrvrAnalogSwitch		SwitchCtrl;
   LrfscDrvrSoftSwitch			SoftSwitch;
   LrfscDrvrPicRegisters		Pic;
   unsigned long				DiagTime;
   unsigned long				RfOnMaxLen;
d126 1
a126 1
   unsigned long				ValidConfigs[LrfscDrvrCONFIGS][LrfscDrvrCYCLES];
d130 1
a130 1
   unsigned long				ValidDiags[LrfscDrvrDiagSIGNALS][LrfscDrvrCYCLES][LrfscDrvrPULSES];
d175 2
a176 2
   LrfscDrvrDiagSnapShot				SnapShot;	/* RW P */
   LrfscDrvrPicRegisters				Pic;		/* RW P Must be posative */
d178 1
a178 1
   unsigned short	RfOffTime;		/* RW Acquired number of 40MHz ticks during RFON pulse	*/
d180 7
a186 7
   unsigned short 	PulseNumber;	/* RO Pulse number in the cycle							*/
   unsigned short 	NextCycle;		/* RW Next 0..31 cycle. Active on next start cycle		*/
   unsigned short 	PresCycle;		/* RO Present cycle executing							*/
   unsigned short 	VhdlVerH;		/* RO High word of VHDL version 32 Bit UTC time			*/
   unsigned short 	VhdlVerL;		/* RO Low  word of VHDL version 32 Bit UTC time			*/
   LrfscDrvrStatus	Status;			/* RO Module status                                     */
   unsigned short	RfOnMaxLen;		/* RW Maximum RF pulse length in ticks                  */
@


1.2
log
@*** empty log message ***
@
text
@a14 13
/* Commands                             */

typedef enum {
	LrfscDrvrControlNONE		= 0x0,
	LrfscDrvrControlDO_AQN		= 0x1,	/* Request a synchronous acquisition */
	LrfscDrvrControlCONT_WAVE	= 0x2,	/* Set mode to continuous wave (CW) */
	LrfscDrvrControlWINDUP_OFF	= 0x4,	/* Turn anti-windup off in the PIC */
	LrfscDrvrControlSATCTRL_OFF = 0x8	/* Turn stauration control of in the PIC */
 } LrfscDrvrControl;

#define LrfscDrvrControlS 5

/* ------------------------------------ */
d169 1
a169 3
   LrfscDrvrResCtrl	ResCtrl;	/* RW X Resonance cavity control */
   LrfscDrvrIQPair	ResFwd;		/* RO X Forward */
   LrfscDrvrIQPair	ResCav;		/* RO X Cavity */
@


1.1
log
@Initial revision
@
text
@d114 1
a114 1
   unsigned long          DebugOn;
@
